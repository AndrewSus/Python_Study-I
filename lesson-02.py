# Работа по домашнему заданию урока 2

# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
# элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя,
# а указать явно, в программе.

list = [1, 2, 'B', (6, 4, 2), {'Oct': 10, 'Nov': 11, 'Dec': 12}, [6, 4, 2], set([6, 4, 2]), 6, 4, 2]
#print(list)
for element in list:
    print(type(element))


# 2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами
# 0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка
# элементов нужно использовать функцию input().

list = input("Вводим через пробел элементы списка:  ")
#list = [1, 9, 2, 8, 3, 7, 4, 6, 5]
#list = [1, 9, 2, 8, 3, 7, 4, 6]
#Так как ввели элементы списка через пробел (тоже является разделителем), приводим в порядок:
list = list.split()
print(list) # проверяем

for element in list[::2]: #Выбираем пары рядом стоящих символов
    index = list.index(element)
    if index+1 < len(list): # Будем менять местами пары, пока не дойдем до последнего четного элемента
        list[index], list[index+1] = list[index+1], list[index] # Так как условие затрагивает только пары, то последний
                                                                #элемент (нечетный) останется на месте
print(list) # Проверяем

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц
# (зима, весна, лето, осень). Напишите решения через list и dict.

# Составляю списки месяцев
winter = [1, 2, 12]
spring = [3, 4, 5]
summer = [6, 7, 8]
autumn = [9, 10, 11]

number = int(input("Введите номер месяца - от 1 до 12 и я сообщу время года  "))
if number in winter:
    print("Зима")
elif number in spring:
    print("Весна")
elif number in summer:
    print("Лето")
elif number in autumn:
    print("Осень")

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

str = input("Введите строку из нескольких слов (после каждого слова - пробел  ")
# строка: В чащах юга жил бы цитрус да но фальшивый экземпляр ёжика (использованы все буквы русского алфавита)
str = str.split()
i = 1
for word in str:
    print(i, word[:10])
    i = i + 1


# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

# 1. Определяю набор натуральных чисел
# 2. Запрос нового элемента рейтинга
# 3. Проверяем случай, если рейтинг меньше последнего, тогда ставим его в конец
# 4. Если нет, то проходимся по списку и ищем место, куда установить введенный рейтинг
# 5.


rating = [6, 5, 4, 3, 2]
rating_copy = rating.copy() # Чтобы было видно как изменяется, сравнивать
new_rating = int(input("Ввод нового элемента рейтинга:   "))
if new_rating <= rating[-1]:
    rating.append(new_rating)
    print(f'Введённый рейтинг {new_rating} вставлен в конец списка {rating}')
else:
    i = 0
    while i < len(rating):
        if new_rating > rating[i]:
            rating.insert(i, new_rating)
            print(f'Введенный рейтинг занимает позицию {i} в {rating}')
            break
        i +=1
print(rating_copy) # Смотрю на первичный
print(rating) # Смотрю на новый

# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
# информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами, то есть
# характеристиками товара: название, цена, количество, единица измерения. Структуру нужно сформировать программно,
# запросив все данные у пользователя.
# Пример готовой структуры:
#
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
#
# Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например,
# название. Тогда значение — список значений-характеристик, например, список названий товаров.
# Пример:
#
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }


# С 120 по 135 строку пытался самостоятельно что-то придумать
# 1. Работаю по составлению списка кортежей:
# 2. Для начала составлю список с ключами (заголовками):
#d = ("Название", "Цена", "Кол-во", "Единица измерения")
#print(len(d))
#arr = [[], [], [], []]
# 3. Заполняю список:
#i = 0
#for i  in range(len(d)):
    #b = d[i]
    #print('Введите ', b, ":")
    #x = input()
    #arr[i].append(b)
    #arr[i].append(x)
    #print(arr)
    #i +=1
#print(arr)

# Проба после подсказки преподавателя

d = ("Название", "Цена", "Кол-во", "Единица измерения")
struct = []
dict = ({d[0]: input('{d[0]} '), d[1]: input('Цена:'), d[2]: input('Кол-во:'), d[3]: input('Ед. измер.:')})
struct.append((len(struct)+1, dict))
print(struct)

# принцип понял. "прилизывать" не буду - а то и так плагиат (СПАСИБО ПРЕПОДАВАТЕЛЮ)

# [(1, {'Название': 'Сканер', 'Цена': '60000', 'Кол-во': '7', 'Единица измерения': 'шт'})]