# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных
# значений необходимо запускать скрипт с параметрами.

from sys import argv
script_name, work_hours, rate_per_hour, premium = argv
print("Название скрипта", script_name)
print("Отработано часов", work_hours)
print("Ставка в час", rate_per_hour)
print("Премия", premium)
print("ИТОГО: ", int(work_hours) * int(rate_per_hour) + int(premium))


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

control_list = [1, 2, 50, 1, 300, 600, 1, 12, 6, 50]
print(f' Контрольный список:  {control_list}')
end_list = [control_list[index] for index in range(1, len(control_list)) if control_list[index] > control_list[index-1]]
print("Значение больше предыдущего:  ", end_list)

# попробую изменить условие на меньше чем предыдущий:

control_list = [1, 2, 50, 1, 300, 600, 1, 12, 6, 50]
#print(f' Контрольный список:  {control_list}')
end_list_min = [control_list[index] for index in range(1, len(control_list)) if control_list[index] < control_list[index-1]]
print("Значение меньше предыдущего: ", end_list_min)

# Контрольный список:  [1, 2, 50, 1, 300, 600, 1, 12, 6, 50]
# Значение больше предыдущего:   [2, 50, 300, 600, 12, 50]
# Значение меньше предыдущего:  [1, 1, 6]


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

x = [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]
print(x)

# Для чистоты эксперимента заменим другими значениями:
# x = [el for el in range(20, 501) if el % 17 == 0 or el % 57 == 0]
# print(x)


# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания
# обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


from random import randint

generat = [randint(55, 60) for i in range(20)]
print(f'Сгенерированный список: {generat}')
itog = [el for el in generat if generat.count(el) == 1]
print(f'Не повторяются следующие:  {itog}')
#print("При генерации повторилось- ", len(generat)-len(itog))

# Сгенерированный список: [59, 57, 58, 58, 59, 59, 60, 58, 60, 55, 55, 57, 58, 55, 60, 56, 57, 57, 56, 56]
# Не повторяются следующие:  []
# При генерации повторилось-  20


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные
# числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce
generat = [i for i in range(100, 1001, 2)]
print(f'Сгенерированный список: {generat}')
itog = reduce(lambda x, y: x*y, generat)
print(itog)




# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и
# cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его
# завершения.
# #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# # Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count, cycle
import sys

# первая часть
start_from = 10
def integer_generator(start_from):
    for element in count(start_from):
        if element > start_from+5:
            break
        yield element
abc = []
for element in integer_generator(1):
    print(element)
    abc.append(element)
print(abc)
# Вторая часть
x = "135"
x_count = 0
abc = []
for i in cycle(x):
    if i == x[0]:
        x_count += 1
    if x_count < 3:
        print(i)
        abc.append(i)
    else:
        break
print(abc)

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
# должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение
# факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from functools import reduce
from itertools import count
from math import factorial

def fact(n):
    result = 1
    for el in count(1):
        if el <= n:
            result *= el
            #result = factorial(el)
            yield result
        else:
            break
abc = []
for i in fact(10):
    print(i)
    abc.append(i)
print(abc)









